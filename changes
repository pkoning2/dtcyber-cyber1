Changes made to DtCyber

Since jul25 drop:

- Added 029 card code support to cr3447, selected by "026" or "029"
  argument on cyber.ini line.
- Changed several files to avoid gcc warning about oversized constants.
- Some optimizations in ppu and cpu emulation, particularly inlining.
- Added dumping of direct cells (as data) to ppu disassembly printout.
- Changed lp3000 to do space after rather than before, and to handle
  eject by outputting a formfeed character.
- Make operator display look better if you don't have CcDebug turned on.
- Suppress displaying of B0 in CPU trace output.
- Fix display bug in win32 output; also add display of channel trace mask.
- Change X11 display to use one-bit pixmap rather than screen depth.
- Fix "1CD gets stuck sometimes" bug in cr3447.
- Change lp3000.c to flush on a Release function if something was printed
  since the last time.  That way you can see job output without having
  to unload every time.

Since aug07 drop:
- Changed ECS address range check in cpu.c to allow transfer all the way
  through the last word of CM/ECS.  The existing code implements the 
  letter of the documentation -- but that doesn't make sense since as
  written the rules don't let you get to the last word of CM.  More
  importantly, it breaks 1.4-552 if ECS is present, when executing at
  the last CP. CPUMTR uses ECS to move the CP when FL changes, and
  some of the ECS references access that last word.  So the old code
  was not executing that move, causing some of the CP memory to be
  messed up.
- Changed dd844.c to do seek at I/O start rather than I/O end so 
  there isn't a false wrap error message for 1:1 interlace.
  Also changed it to suppress the fseek() call when it's not needed.
- Changed dd844.c to store a sector of data in 512 bytes, packed
  2 PPU words into 3 bytes, with the remaining few bytes of the 
  512-byte block unused.  This makes the containers somewhat smaller
  and also makes all disk I/O aligned onto modern disk sector 
  boundaries.
  This change is INCOMPATIBLE with existing disk container files,
  so I used pfdump/pfload to carry data between versions.

Since aug11 drop:
- Changed character positioning in window_x11.c so the supplied 
  x/y is the position of the center of the character.  That seems 
  right for several reasons.  DS1 now shows the O centered on the
  crosshairs; it doesn't say if that is right but at least it now
  matches ONE of the two possibilities it mentions rather than
  neither of them.  Second, the positioning of the B relative
  to the body of the B-display matches what the screenshot of a
  6612 on the Twiki shows.
- Changed window_win32.c similarly, except that I cheated on
  the ascent.  Need to test this.
- Changed window_x11 to use "Seymour" font, which is encoded by
  display code and is 8/16/32 pixels wide so no positioning is
  needed.  Operator window still uses Lucida Typewriter.
  *** need to make corresponding changes to window_win32.c ***
- Changed Makefile to include creating of pcf files.
- Fixed ddp.c so it works for flag register operations
  where the PPU doesn't read any data at all.
- Changed window_x11 to track the coordinates referenced in output
  between each pair of input polls.  If the coordinates repeat
  (indicating a full refresh cycle) discard the old stuff.
  This is like what I did before but works correctly with WRM.
  Also increased the display buffer ring size.  It needs to be
  big enough to hold two complete repeats of output, otherwise
  you sometimes get flickering with the other optimization.
  The CMRINST display shows this issue clearly.  
- Changed window_x11 to do intensity control of dot output.
- Changed window_x11, operator, and console to handle multiple
  simultaneous keypresses in the authentic manner. Starwar now seems
  to work as it should.

Since aug18 drop:
- Fixed bugs in ddp.c.
- Make authentic keyboard handling NOT the default, but accessible
  via an operator command.
- Add tracing of a specific control point.  (This depends on NOS 1
  memory layout: NCPL and ACPL.)
- Add dump of CM referenced by an RE/WE instruction in CPU tracing.
  *** this worked and then I broke it, need to find out why ***
- Changed mt669.c to issue a warning when loading a tape image read/write
  and that file is not empty.  This helps to avoid writing over
  real data.
- Fix niu output format to match the real code, I misread the PPU
  code rather badly...
- Fix dd844.c to disconnect the channel only in the cases where the
  manual says it should do it.  (Basically, that's reads and errors,
  but not any output operations to the channel such as seek or write.)
- Added PP trace on/off under program control, via opcodes 2542 and 2576.
- Added code to trace.c, operator.c, window_*.c to flush the trace files
  when tracing is turned off, so I can see what trace data was collected
  without shutting down DtCyber every time.

Since aug29 drop:
- Changed rtc.c to use the Pentium cycle counter register to do
  timekeeping.  This code is enabled for Windows, and for other
  (GCC based) targets if the cpu is x86.
  This option is active when clock=0 is specified in cyber.ini.
- Change lp3000.c so it will generate interrupts if the interrupt is
  enabled after an I/O is issued.  By then the "ready" flag is already
  set since I/Os complete in "zero time".
  (Hm, it's still slow.  I think 1CD may just be slow...)
- Added "untrace,reset." command that stops all tracing and truncates
  all the trace files back to empty.  Handy when you're done analyzing
  traces and want to free that space without restarting DtCyber.
- Added Plato input mode to window_x11.c.  This is turned on/off by
  Alt-P, only if the NIU is enabled in the config.  If Plato mode is
  in effect, all keystrokes go to NIU input port 0 unless they are
  Alt keycodes that aren't mapped to Plato (those are handled normally).
  Also have Scroll Lock toggle display hold.
  *** all of this is still only for X11; Win32 is coming. ***
- Bugfix in ddp.c, thanks Nick Glazzard!
- Add CP trace on/off similar to the PP trace control mentioned above.
  For the CPU, on is "sb0 b1+42" and off is "sb0 b1+76".
- Fix trace.c to disassemble JP instructions correctly.
  Also fix it so the traced CP is reset when tracing is stopped.
- added "unload" feature to dd844.c, which flushes the file buffer 
  for the specified unit.  That lets other programs write data into
  the disk container file without requiring a DtCyber restart.
- Added pterm_x11.c to emulate a Plato IV terminal.  Start one pterm
  window at DtCyber start if NIU is configured.
- changed ddp.c so it clears the "disconnect after read" flag when
  a new function code comes in, so flag register aborts don't mess
  up a subsequent status read.  This fixes a hang in the "mas" ppu 
  program used by "mastor" if several copies are active simultaneously
  for several CPs.
- Added "pterm.c" which is the mainline for a "remote" Plato IV terminal.
  It uses pterm_x11.c for the actual display, but connects to DtCyber
  via a TCP connection on port 5004 -- which talks to the NIU.
  *** this is only for X11; Win32 is coming. ***

Since oct09 drop:
- Cleaned up the Windows version.  It now runs at a reasonable speed
  (as opposed to being very sluggish before).  It also has bitmap based
  fonts that match the classic CDC console, same as the X11 version.

Since oct14 drop:
- Updated BDF (X format) Seymour fonts to match the Windows bitmap font
  (from fonts.bmp).
- Bugfix in dd844.c to force seek on the container file when switching 
  between reading and writing.  Without that, the buffered I/O causes
  the I/O to be done to the wrong location.
- Added Xresource support, so colors can be customized.  
- Bugfix in niu.c (off by 1 error in input polling loop).
- Changed trace mask layouts so they work with 20 PPU config.
  Ignore NoHang bit when doing channel number matches in channel trace check.
- Added tracing to pterm.
- Fixed dot display in pterm to set current X/Y.
- Fixed off by 1 error in YADJUST for Xwindows output in pterm.
- Fix typo in 026 card code translation (< was translated to ] !)
- Added code to cpu.c, trace.c, proto.h to let a program turn on CPU
  tracing for K cycles (sb0 b2+K)
- Added better trace support to pterm.c, it now sends debug traces
  to a file (pterm.c), control/T toggles it on and off, and the
  trace is formatted so it's reasonably readable.
- Added support to niu.c (turned off after testing) to pace output
  frames to 60 per second, matching the real hardware.
- Added support in rtc.c for the high resolution hardware time in Apple 
  systems.

Since nov19 drop:
- fix rtc.c so it doesn't crash if non-zero clock increment is used
  on platforms that have hardware fine grain clock support.  Ugh...
- fix pterm_x11.c so it doesn't crash on shutdown if niu is not
  part of the system configuration.

---
Nov 26: started multi-cpu version, with threads for each CPU and one
for the PPUs.

- Initial version works -- two CPU support with per-CPU context separated
  out, but no multi-threading yet.  So the semaphores that will make
  that safe aren't there yet, but the rest is in place.  NOS 1.4 seems
  happy with it.
  It appears that NOS schedules CPs to the CPU in no particular pattern...
- Changed niu and mux6676 to explicit returns in the thread function to
  silence some compiler warnings.  Also changed these so the pthread
  struct is not a stack local variable that evaporates after thread 
  startup.  Somehow, that doesn't seem right, even though it doesn't
  appear to break things.
- Changed types.h to work with powerpc (Mac).
- Added semaphores and condition variables around the multi-CPU support.
  It appears to work, roughly.  NOS is able to start but it hangs 
  early in the deadstart library load procedure, with both CPUs in
  the idle loop.
  It seems that CPU0 needs to run closely synchronized with the PPUs,
  otherwise the deadstart memory test aborts.  So the current design
  has CPU1 in a separate thread but not CPU0.  That fits better with typical
  two-CPU hosts platforms anyway.
  Still to be done:
  - Selective creation of threads so CPU1 only gets a separate thread
    if there is a second host CPU.
  - Per-CPU trace control via the keyboard (it already works via 
    the operator interface).
- Changed the "time to paint the display" checking code in window_x11 to
  use the hardware fine grained timer rather than the gettimeofday() call.
  That should make it more efficient.
  Note: there's something strange on the Mac that makes this not work
  right, so I've turned it off there.
- Renamed Makefile.x11 to Makefile because I'm tired of typing -f xxx.

- Dual host CPU seems to work correctly now.  Tweaked the Makefile a bit
  to clarify the various build choices.

Since jan02 2004 drop:
- Changed pterm_x11.c to add platobackground property.  Make it work right
  for the whole window, not just the 512 pixel area inside the margins.
- Changed Makefile for Apple "fat binary" build.  
- Fix DM mode PP instructions with D==0 so references to location 7777
  end up at 0 instead.  That correctly emulates the subtractive adder
  behavior of the DM address handling, and apparently is required for SMM
  to work correctly.  (Thanks Jeff Woolsey for this information.)
- Added cp3446.c for 3446 card punch support, and changed cr3447.c to
  print default card code chosen at startup.

Since jan16 2004 drop:
- Added missing cp3446.c  :-(
- Changed Makefile for Mac to build G3 flavor as well.
- Reverted index addressing in pp.c to what Tom had.

Since jan21 2004 drop:
- Fix wrong display mode in pterm after expose event (it was setting
  inverse mode unconditionally).
- Fix cpu tracing to decode CMU instructions correctly, including
  display of the descriptor used by an indirect move.
- Added support for original (644 bytes per cyber sector) 844 container
  file format.  To get that, add ",old" after the container file name
  in the cyber.ini file entries.
- Fix cpuReadMem and cpuWriteMem to use cpuAdd18 for adding in RA.
  Now EJT no longer complains about P + RA adder being broken.
  Thanks Gerard!
- Fix TRACE,CPUxx. command to accept the argument as documented.
- Change memory references to be modulo the CM size in all cases, so the 
  system acts as if the unused address wires are ignored.
- Change pterm_x11.c to wrap character plotting around screen edges.
- Added ECS tracing, keyboard control of CPU1 tracing.  ALT/J now toggles
  XJ tracing (was ALT/E).  ALT/c toggle CPU0, ALT/SHIFT/C toggles CPU1 
  tracing.  ALT/E toggles ECS tracing.  In the status display line,
  J means XJ tracing is on, E means ECS tracing, c means CPU0 and C 
  (capital C) means CPU1 tracing is on.

- Merge Tom's 2.1Beta0:
  Changed dd844.c to dd8xx.c (sorry, CVS doesn't do this well...)
  Resolved all the merge conflicts in lots of places (except window_win32.c,
  that one is still on the to-do list, and the flaw map handling in dd8xx.c)
  Fixed a typo in dd8xx.c, it was displaying 0 cylinders for the disk
  size at startup.
- Added setting of the "reuse" flag to niu.c (lifted from mux6676.c)

- Flaw map setting now fixed, along with read utilty map and read factory
  data functions (I had overlooked that those needed fixing, too).
- Changed the character wrap and clip handling in pterm_x11.c so the
  spot where the trace marker is displayed is not active.  That way
  we don't get stray pixels there.
- Merged window_win32.c
- Updated window_win32.c for dual CPU trace, ECS trace on/off and display;
  Plato mode on/off/display.  Added dot mode intensification.
- Added Hershey (stroke) font support to window_x11.c
- Removed a few unused variables.
- Added plato terminal window handling for Win32.
- Added "true" keyboard emulation for Win32 (may not be quite right yet?)
- Fix exit handling for pterm window for Win32.
