mods.
user(plato,plato)
settl(*)
setasl(*)
setjsl(*)
rfl,170000.
attach(opl=plaopl)
attach(opl2=opl580)
attach,npl=ipl/m=w,na.
if(.not.file(npl,as))define,npl=ipl.
modify(n,u,c=0)
return(opl)
~
*oplfile opl2
*/ -------------------------------------------------------------------
*/
*/ increase frame count to 1024 (was 128) and mout buffer to 1000
*/ (was 512)
*/
*/ -------------------------------------------------------------------
*ident fram1k
*deck pftext
*delete vgtext.1
 MOUTLTH  EQU    1000d       USABLE *MOUT* AREA (ARBITRARY)
*delete pftext.33,pftext.34
 NFRAMS   EQU    1024d        NUMBER OF FRAMES
 NFRMSHF  EQU    10d
*/ end pftext
*/
*deck pio
*delete pio.72
*         FMASK   - NFRMSHF/NFRAMS
*delete pio.80
 FMASK    EQU    1777B       MASK FOR FRAME INDEX
*/ end pio
*/
*deck ftext
*delete ftext.362
* this takes two steps because *max* produces a redefinable
* symbol, and those are not saved in the cmtext.
 OUTBL.   MAX    MDISMAX+4,NFRAMS
 outblth  equ    outbl.
*/ end ftext
*/
*/ -------------------------------------------------------------------
*/
*/ Change framat-pio interface so DtCyber emulated niu works correctly
*/ when running without rate limiting.
*/
*/ The effect of the lack of rate limiting is that pio can get ahead
*/ of framat, unlike the classic hardware which needed 16.66 ms to
*/ send a frame and would not accept another one until that time is up.
*/ The framat-pio communication assumed that it would not be possible
*/ for pio to finish one frame and go on to the next in less time than
*/ it would take framat to frame all the pending output for a station.
*/ If there is a lot of output to frame, that is no longer true when
*/ the niu frame pacing is taken out of the picture.
*/
*/ Solution: (a) update the frame counters all the time.  (b) add
*/ a framat-pio interlock variable, 2 ecs words right after the
*/ pio frame counter words (one per niu).  Framat sets that word
*/ non-zero while it is filling the frame buffer chain for a station,
*/ starting just before it reads the ppu frame counter, and ending
*/ after it has written the updated frame lengths.  If the interlock
*/ is set, pio waits exactly as it would clasically when the niu is
*/ not yet ready for a new frame.
*/
*/ Note that the error correction code paths are not handled in this
*/ patch, because they are not used in the emulated environment.
*/
*/ -------------------------------------------------------------------
*ident fastniu
*deck format
*delete format.297,format.304
*/ end format
*/
*deck pio
*insert pio.28
*             The framat-pio framing interlock is at offset +2 from here.
*delete pio.268,pio.270
*         wait for framat-pio framing interlock to be clear
*
 m110     ldc    ecsbuff
          STD    D.T0        D.T0 = PPU MEMORY ADDRESS
          LDM    ECRA+1      COMPUTE ECS ADDR OF interlock
          ADM    OUTPNT+1
          adn    2           +2 for interlock
          STD    D.T2        D.T2 = LOWER PART OF ECS ADDR
          SHN    -12
          ADM    ECRA
          ADM    OUTPNT
          STD    D.T1        D.T1 = UPPER PART OF ECS ADDR
          LDN    5
          STD    D.T3        D.T3 = NUMBER WORDS TO read
          call   readecs     read interlock
          ldm    ecsbuff+4   
          njp    main        if interlock set
*
*         ATTEMPT TO SELECT CIU AND OUTPUT NO-OP
*
          IJM    M112,O=NIU
*/ end pio
*/
*deck platxt
*delete platxt.671
 AFRAMPT  ECSBUF 4           FRAME COUNTERS and framer-pio interlocks
*/ end platxt
*/
*deck format
*insert FORMAT.2034
          sa2    xfrmpnt
          sx3    2
          mx6    0
          ix3    x2+x3       form address of interlock
          wx6    x3          clear pio interlock (MAY CHG *A6*)

*delete format.2042
          sa2    xfrmpnt
          sx3    2
          sx6    1
          ix3    x2+x3       form address of interlock
          wx6    x3          set pio interlock (MAY CHG *A6*)
          rx2    x2          read current pio frame ctr (MAY CHG *A2*)
          ix3    x1-x2       check pio against framat pointers
          pl     x3,ftw050   if framat not behind
          bx1    x2          start framing from next pio frame
          bx3    -x3         number of frames pio is ahead
          sb6    x3          pretend to caller we used that much extra

 ftw050   MX0    -NFRMSHF
*/ this one line change is a documentation fix
*delete for180.35
 SETF     SA2    XFRMPNT     ECS ADDRESS OF pio frame counter
*/ end format
*/
*/ -------------------------------------------------------------------
*/
*/ Remove "press -BACK- to exit" 
*/
*/ -------------------------------------------------------------------
*deck mainov
*yank pbte
*/ end mainov
*/
*/ -------------------------------------------------------------------
*/
*/ make dd60 assemble on NOS 2.1
*/
*/ -------------------------------------------------------------------
*ident dtcyber
*deck dd60
*yank WS2P3
*yank YPPDD,*
*yank YPPDDRS,*
*/ end dd60
*/
*/ -------------------------------------------------------------------
*/
*/ set OS level and system type
*/
*/ -------------------------------------------------------------------
*deck syscon
*delete jsnppu.28
*/
*/ We call it 180, not 170, even though we really aren't.
*/ The only difference is that rx and wx instructions
*/ are enabled, which is required or fovlay5 doesn't fit.
*/ (The other difference is that some necessary code in pms
*/ disappears, but the mod below, deleting pms800 1-4, cures that.)
*/
 MACHINE  MICRO  1,3,/180/   CYBER 180 OR CYBER 170 SYSTEM

*                OS level

          if     -mic,noslvl,1
 NOSLVL   micro  1,,/"modlevel"/

*                production or development

 dev      equ    0           production system

*/ end syscon
*/
*/ -------------------------------------------------------------------
*/
*/ Some edits needed to make things build on NOS 2.1-580.
*/
*/ -------------------------------------------------------------------
*ident plsi580
*deck comsssd
*insert ns21000.3
 PLSI     EQU    7754        PLATO / CYBIS
*/ end comsssd
*/
*ident cyb580
*deck pms
*yank pms800
*insert yr2p4p2.29
 .NOS251  IFGE   OSLEV,664D
*delete zq2p5p1.7
*insert YT2P4P2.6
          DSKER  FTOE,XTOE        FUNCTION TIME-OUT

*/ end pms
*/
*deck mrq
*prefix .
.insert XK2P4P1.29
*call     aidtext            nos level dependent instructs. 
.insert XK2P4P1.30
 .nos22   ifge   oslev,594d
.prefix *
*insert XK2P4P1.36
 .nos22   endif
*delete mrq.194
*/ end mrq
*/
*deck mrq1
*delete MRQ1.1596
          LDK    /CPS/SSIS   SJCM SUB-FNC = SET SUB-SYS ID
*/ end mrq1
*/
*deck dsn1
*delete DSN1.191
          ERRNZ  STBKL-28D  STATION BANK LENGTH .NE. 28D
*delete dsn1.204
*/
*/ This makes it fit, trimming a message
*/
*delete dsn1.2186,dsn1.2191
*/ end dsn
*/
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*/
*/ the remaining mods are taken from *plmods* from faa.
*/
*/ -------------------------------------------------------------------
*/
*ident,cyb97b
*deck,placsmd 
*d,cyb97a.1
 platlvl  micro  1,,/99'a/
*/ -------------------------------------------------------------------
*ident,pni800x
*deck,pni2
*d,pni2.37,pni2.39
*call     comccmd 
*call     comcmac 
*call     comsprd 
*call     comccvl 
*i,xtipc.55 
* /---   block      pnii       00 000   81/05/27  13.32 
*i,pni2.1333
*         determine if running on a170 system or not
  
          getmc  mcbuf       get machine characteristics
          sa1    mcbuf       (x1) = word with 170/835 status
          mx0    -1 
          lx0    20          position mask under 170/835 bit
          bx6    -x0*x1      (x6) = 170/835 status flag 
          sa6    a170 
  
*i,pni2.1357
  
          sa1    a170 
          nz     x1,pnia170  if a170, skip reset
  
*d,vgmpni.13
 pnia170  sa1    actr 
*d,bjsac.11 
*i,vgmpni.30
* /---   block      pnii       00 000   81/05/27  13.31 
*d,jsnppu.5 
*i,vgmpni.64
* 
 mcbuf    con    0           machine id return word 
 a170     con    0           a170 status word 
* 
* /---   block      pnii       00 000   81/05/27  13.30 
*d,pni2.1836,pni2.1841
  
 wcb6a    bx6    x1          save *x1*
          sa1    a170 
          nz     x1,wcb7     if a170 system, skip 
  
+         re     1
          eq     *           re-try on reject 
  
 wcb7     bx1    x6          restore *x1* 
          bx0    x1          save buffer pointer
          recall             pause
          bx1    x0 
          eq     wcb6a       try again
*i,pni2.1845
* /---   block      rsr/svr    00 000   81/05/27  16.05 
*i,pni2.1850
  
          sa2    a170        see if a170 system 
          nz     x2,wcbskp1  if a170 system, skip 
  
*d,pni2.1856,bjsac.14 
 wcbskp1  mx7    -21
*i,pni2.1914
* /---   block      rsr/svr    00 000   81/05/27  16.17 
*d,pni2.1926,pni2.1929
* 
          tx0    /plat/gfr17,ecscl release interlock
          lx0    /plat/gfrsc
          bx6    x1 
          sa1    a170        see if a170 system 
          nz     x1,wcb5a    skip if a170 system
* 
+         re     1
          eq     *           re-try on reject 
  
 wcb5a    bx1    x6          restore *x1* 
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,jpoutfx
*deck,tutorx
*i,tutor1x.18 
 jmpmode  equ    tbintsv+7   save jumpout mode
*d,tutor1x.32 
 padjump  sx6    2           -jumpout- based on *key* value 
*d,tutor1x.36 
 feditx   sx6    1           -filedit-
*d,tutor1x.40,tutor1x.42
 jmpoutx  sx6    0           -jumpout-
 jpfego   sa6    jmpmode     save mode for later
*d,tutor1x.60,tutor1x.62
* /---   block      -jumpout-  00 000   81/08/14  13.47 
*i,tutor1x.69 
          sa1    jmpmode     get jumpout mode 
          bx0    x1          restore *x0* 
*d,tutor1x.83 
          sa1    jmpmode     get -jumpout- mode 
*i,tutorx.4405
 awvars   vfd    42/0,18/work-1 
* 
* 
* /---   block      deffont    00 000   78/10/03  16.08 
*d,varsfix.2,varsfix.5
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,faadev 
*/ added cyber1 and cyber2 -- gpk 04.08.23.
*deck,msubs 
*d,msubsa.6,msubsa.8
 ndevsys  equ    5           maximum number of dev systems
          data   0luol       university online system 
          data   0lcybdev    cybis development system 
          data   0lfaa       faa system (used by uol) 
          data   0lcyber1    cyber1.org system
          data   0lcyber2    second cyber1.org system
*d,msubsa.15,msubsa.17
 nuolsys  equ    3           maximum number of uol systems
          data   0luol       university online system 
          data   0lcybdev    cybis development system 
          data   0lfaa       faa system (used by uol) 
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,lviofix
*deck,autload 
*d,autload.88,loadfix.3 
          call   rvload 
* 
 lload    bss    0
          call   lvload,1    load local vars for this unit
* 
          mx6    0           zero max nc vars loaded
*d,autload.441
*         called from one place in -lessons- and -filex-
*d,autload.451,autload.453
          rj     rvload 
          eq     rload
* 
          entry  rvload 
 rvload   eq     *           entry/exit 
          sa1    tbrvnum     router variables lesson number 
          zr     x1,rvload
          sx2    x1          get lesson number
*d,autload.462,yulverr.1
          eq     rvload      -- exit
* 
          entry  rvuload
 rvuload  eq     *           entry/exit 
          sa1    tbrvnum     router variables lesson number 
          zr     x1,rvuload 
          sx2    x1          get lesson number
          sx3    2           bias for header
          call   lessadd
          ax1    18          get number of variables
          sb1    x1 
          bx0    x7          ecs address of variables 
          sa0    rvarbuf
+         we     b1          store router variables 
          rj     ecsr 
          eq     rvuload
* 
* /---   block      lvload     00 000   81/10/26  17.14 
*d,autload.471
*         called from csload, csuload, join, unjoin, dataio 
*d,autload.477,autload.478
          zr     x1,lvload   if no locals 
          sa2    lvucnt      number in current unit 
          zr     x2,lvload1  skip chk if no lvars in unit 
*d,autload.493
          sa2    lvecsad     get ecs address of lv buffer 
*d,autload.539,loadfix.51 
          call   rvuload
* 
 luload   bss    0
          call   lvload,-1   unload local variables 
* 
          call   uloadcs     unload common and storage
          call   savejdg     save judge buffers (if any)
*deck,filex 
*d,filex.1908 
          sa2    dsnwrds     (x2) = number of words 
*d,bilvars.5,bilvars.11 
+         zr     x3,*+1      if first word, skip *nz* check 
          ng     x3,dsiocmr  before locals, check router
+         ix3    x1+x2       (x3) = lwa +1 of transfer
          ix3    x4-x3       check if in local range
          zr     x3,dssvset  if perfect fit, go 
          ng     x3,dsiocm1  beyond range of locals 
 dssvset  sx6    dio.sv      reset type of i/o to sv
          sa6    dskind      locals treated same as svars 
          eq     dsiochk     --- if all ok
* 
* /---   block      bounds     00 000   81/10/26  07.47 
 dsiocmr  sx3    rvarbuf     (x3) = fwa of router vars
*tbrvnum = 1/in-router flag,23/0,18/^$of rvars,18/rvar less^$ 
          sa4    tbrvnum     router var info
          ax4    18          right justify ^$ of rvars
          sx4    x4          (x4) = ^$ of rvars 
          ix4    x3+x4       (x4) = lwa +1 of rvars 
          ix3    x1-x3
+         zr     x3,*+1      if first word, skip *nz* check 
          ng     x3,dsiocm1  before router, check nc
+         ix3    x1+x2       (x3) = lwa +1 of transfer
          ix3    x4-x3       check if in local range
          zr     x3,dssvset  if perfect fit, go 
          pl     x3,dssvset  if in range, process as svars
*d,ncvrbuf.4
*d,filex.2230,filex.2236
 dsiow1   rj     iosetup
*d,filex.2240 
          sx2    x1-dio.nc   check if to/from nc vars 
          sa1    dsrel       absolute cm address
***   load *dsrel* into *x1* before checking nc vars
          zr     x2,dscmw0   --- if to/from nc vars 
          sx6    lvarbuf     see if local var to store into 
          ix6    x1-x6       negative if not local var
          ng     x6,dscmnlw  -- if not local var
          sa2    tlvless     load local var lesson number 
          call   lvaddr      update *lvecsad* incase moved
          call   lvload,1    load local vars
          rj     iosetup
          eq     dscmw0 
* 
 dscmnlw  bss    0
          sx6    rvarbuf     see if router var stored into
          ix6    x1-x6       compare
          ng     x6,dscmw0   if not router var, skip
          sa2    tbrvnum     router variables lesson number 
          pl     x2,dscmw0   sign bit = in-router flag
          call   rvload      load router vars 
          rj     iosetup
* 
 dscmw0   bss    0
*d,filex.2246 
*          title  dataset disk read 
*d,filexx.390,filex.2256
          rj     iosetup
*i,uznsub1.176
* /---   block      dsior      00 000   81/10/26  20.30 
*d,filexx.409,filexx.410
          sa1    dsrel       absolute cm address
          eq     dscm0
* 
 dsiorcm  sa1    dsrel       absolute cm address
          sx6    lvarbuf     see if local var to store into 
          ix6    x1-x6       negative if not local var
          ng     x6,dscmnl   -- if not local var
          sa2    tlvless     load local var lesson number 
          call   lvaddr      update *lvecsad* incase moved
          call   lvload,1    load local vars
          rj     iosetup
          eq     dscm0
* 
 dscmnl   bss    0
          sx6    rvarbuf     see if router var stored into
          ix6    x1-x6       compare
          ng     x6,dscm0    if not router var, skip
          sa2    tbrvnum     router variables lesson number 
          pl     x2,dscm0    sign bit = in-router flag
          call   rvload      load router vars 
          rj     iosetup
* 
 dscm0    bss    0
*i,filex.2279 
* 
          sa2    dskind      (x2) = type of datain/dataout
          sx2    x2-dio.nc   check if to/from nc/nv vars
          zr     x2,dscmu    -- if to/from nc/nv vars 
  
***       *x1* has cm address to store into 
          sx6    lvarbuf     see if local var stored into 
          ix6    x1-x6       negative if not local var
          ng     x6,dscmnl2  -- if not local var
          call   lvload,-1   save updated local vars
          eq     dsionxt
* 
 dscmnl2  bss    0
          sx6    rvarbuf     see if router var stored into
          ix6    x1-x6       negative if not router var 
          ng     x6,dsionxt  -- if not router var 
          sa2    tbrvnum     router variables lesson number 
          pl     x2,dsionxt  sign bit = in-router flag
          call   rvuload     save updated router vars 
          eq     dsionxt
*d,uqnso3.210,uqnso3.212
 dscmu    bss    0
*i,filexx.442 
 iosetup  eq     *           entry/exit 
          sa1    tioecs      (x1) = em address of i/o bank
          sx2    ioblth 
          sa3    dsbias      offset to 1st disk buffer word 
          ix0    x1+x2
          ix0    x0+x3
          sa2    dswcnt      word count 
          sb2    x2 
          sa1    dsrel       restore absolute cm address
          eq     iosetup     -- exit
* 
*deck,logicx
*d,logicx.1565,logicx.1569
          call   lvaddr 
*i,logicx.1577
***       set *lvecsad* with current local var em address 
* 
          entry  lvaddr 
 lvaddr   eq     *           entry/exit 
          ax2    18          move lesson number 
          sx2    x2          strip off lesson number
          sx3    lvhead      header bias
          call   lessadd     x7 = ecs addr. of locals lesson
          sa7    =xlvecsad   store ecs address in cm cell 
          eq     lvaddr      -- return
* 
* 
*deck,platxt
*i,platxt.1468
 lvucnt   bss    1           number of local vars this unit 
 lvecsad  bss    1           ecs address of local var lesson
* 
*d,ncvrbuf.27,ncvrbuf.28
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,filedfx
*deck,tutorx
*d,tutor1x.44 
          bx7    -x1*x6      bit 0; 1=filedit, 0=jumpout
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,fgtcrsx
*deck,exec7 
*i,kytfgtx.7
          sx7    1           normal course/fine conversion
*i,kytfgtx.30 
          sx7    -1          fgt course/fine conversion 
*d,kytfgtx.76,kytfgtx.77
*                  *x7* has normal(1) or fgt(-1) flag 
* 
 touchxy  eq     *           entry/exit 
          sa7    kfgt        save touch mode
*d,fgtgfix.1,fgtgfix.2
          sa1    kfgt        get touch mode 
+         ng     x1,*+1      if fgt, assume in dots 
          lx6    3           convert to fine grid 
+         sa6    varbuf+2 
*d,fgtgfix.3,fgtgfix.4
          sa1    kfgt        get touch mode 
+         ng     x1,*+1      if fgt, assume in dots 
          lx6    4           convert to fine grid 
+         sa6    varbuf+3 
*i,exec7.2041 
 kfgt     bss    1           fgt mode'/ (-1=yes, 1=no)
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,statnfx
*deck,logsitx 
*d,logsitx.1458,alesnam.2 
          sa3    statemp+12  get *trouinf*
          sx1    x3          router lesson number 
*d,logsitx.1467,logsitx.1469
          sa1    a0+1        get lesson name
 stir     bx6    x1 
          sa6    a3          store name in statemp+12 
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,date4
*deck,comnds
*d,woipc.1
          jump   8ldate4,date4,0,onestor,11010,date4x       date4    147
*deck,exec1 
*d,exec1.87 
          ext    copyx,jkeyx,datex,date4x,clockx
*deck,exec2 
*d,exec2.33 
          entry  copyx,jkeyx,datex,date4x,clockx
*d,exec2.622
 date1    sa2    iloc 
*d,xkreorg.49,exec2.631 
* 
* 
          title  -date4-
*         -date4-  (code=147)
* 
*            stores the current date in y2k formast (as 
*           read from nos lowcore) in specified variable. 
* 
 date4x   ngetvar            a1 = variable storage address
*d,exec2.635,exec2.639
          sa1    itemp+2
          eq     date1       go and save it 
* 
* 
          title  -clock- command
* 
*         -clock-  (code=137) 
* 
 clockx   ngetvar            a1 = variable storage address
          sx6    a1 
          sa6    iloc 
          call   s=tdate,itemp     read time/date 
          sa1    itemp
          eq     date1       go and save it 
* 
* 
*deck,namex 
*d,namex.3151 
 datime   bss    3           current time/date
*deck,recordx 
*d,recordx.3966 
 datime   ovdata 3           alpha time/date (3 words)
*deck,record2 
*i,record2.1529 
 temp2    ovdata             for *s=tdate= call 
*deck,psys
*d,psys.651 
*         on entry - b1 = address of three word buffer in 
*i,psys.655 
*                   date4= (mm/dd/yyyy) 
*i,psys.683 
          bx6    x7          copy date
          lx6    48          right-shift 2 character
          mx0    -6          mask for last char 
          bx6    -x0*x6      mask out *tens* of system yr 
          sx0    1r9         check to see if year *9x*
          bx0    x6-x0       see if year *199x* 
          zr     x0,*+2      if *199x*, set to 1900 
+         sx1    2r20        century 2000 
          eq     *+2         skip to set century
+         sx1    2r19        century 1900 
+         lx1    12          position for insertion 
          bx6    x7          copy date
          lx6    54          set format '7  mm/dd/yy'7
          mx0    48 
          bx6    x0*x6       mask out '7  mm/dd/  '7
          lx6    12          set format '7mm/dd/    '7
          mx0    36 
          bx6    x0*x6       mask out '7mm/dd/    '7
          bx6    x6+x1       set format '7mm/dd/yy  '7
          lx7    54          set format '7--mm/dd/yy'7
          mx0    -12         mask out last 2 chars
          bx1    -x0*x7      get *yy* from original -date-
          bx6    x6+x1       set format '7mm/dd/yyyy'7
          sa6    a7+1        save in *itemp+2*
*i,psys.686 
* /---   block      routines   00 000   82/10/03  16.36 
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,cdaty2k
*deck,exec9 
*i,exec9.357
* /---   block      ident      00 000   82/09/26  20.39 
*d,exec9.368
*i,exec9.402
* /---   block      ident      00 000   82/09/26  20.37 
*d,exec9.536
*i,exec9.541
* /---   block      ident      00 000   82/09/26  22.32 
*d,exec9.615
*i,exec9.623
* /---   block      ident      00 000   82/10/07  21.49 
*i,exec9.628
*         -cdate- can convert 4 types of input';
* 
*         1) -day- input
*         2) -date- input 
*         3) -date4- input
*         4) month, day, year input 
*                yr = 70-99 (1970-1999) 
*                     00-69 (2000-2069) 
*                     100-199 (2000-2099) 
*                     1970-2069 
* 
*d,exec9.658
          ng     x4,dalpha   alpha format input (date)
          bx1    x4          copy value 
          lx1    6           shift 1st char right side
          mx0    -6          mask first char
          bx1    -x0*x1      get first char (right side)
          sx0    1r0         see if first char ',0',
          bx0    x0-x1       compare
          zr     x0,dalpha   -date4- format 
          sx0    1r1         see if first char ',1',
          bx0    x0-x1       compare
          zr     x0,dalpha   -date4- format 
*d,exec9.667,exec9.670
          sb1    3
          eq     b1,b3,nolzero  if yy/mm/dd.. 
          sb1    6
          eq     b1,b3,nolzero  if yyyy/mm/dd 
  
          mx3    6           check for leading zero 
          bx3    x7*x3       mask out first character 
          lx3    6           right justify character
          sx1    33b         ',0',
          ix3    x3-x1       compare
          nz     x3,nolzero 
*i,exec9.679
* /---   block      ident      00 000   82/10/09  20.40 
*d,exec9.688
*i,exec9.746
* /---   block      ident      00 000   82/10/09  20.40 
*d,exec9.752
*d,exec9.758
          sb3    x1          (b1) = format 1-6
*d,exec9.766
          sb1    6           1-3 regular, 4-6 y2k 
*i,exec9.778
* /---   block      ident      00 000   82/10/09  22.10 
*d,exec9.806,exec9.811
          ng     x1,err0     leave if < 0 
  
*d,exec9.822,exec9.834
  
**        comment out lines below to solve year 2000
**        leap year problem.    10/09/98 cmh
*          bx3    x0
*          bx4    x1
**         ix2    x4/x3       form partial year 
*          px4    x4
*          px3    x3
*          nx4    x4,b4 
*          nx3    x3,b4 
*          fx2    x4/x3 
*          ux2    x2,b4 
*          lx2    b4
*          ix0    x0*x2 
*          ix1    x1-x0       (jul * 4)-1-(146097 * year) 
**        above lines commented out because checking for
**        leap year in year 2000 does not compute correctly.
**        this will have to be fixed further before year
**        2100 to prevent leap year.  10/09/98 cmh
  
*i,exec9.862
* /---   block      ident      00 000   82/10/09  23.27 
*d,exec9.894
*d,exec9.898,exec9.900
  
*          sx0    100 
*          ix2    x0*x2       year*100
*          ix2    x2+x1       year _ year*100+jul 
**        above 3 lines commented out because removing
**        check for 146097 check on day/month automatically 
**        adds 100 to the year.   10/09/98 cmh
          bx2    x1          get year (10/10/98 cmh)
*i,exec9.915
  
  
* /---   block      ident      00 000   82/10/09  23.58 
*d,exec9.943,exec9.944
          sa1    datesl      10h00/00/0000
          bx6    x1 
  
          sx1    2000        check to see if date < 2000
          ix1    x2-x1       compare
          ng     x1,dpack00  if negative, year 1900+
          sx2    x1          convert to 2 digit year
          eq     dpack02
  
 dpack00  sx0    2r19        year 19xx
          sx1    1900d       see if 4 digit year
          ix1    x2-x1       compare
          ng     x1,*+2      if < 1900, continue
+         sx2    x1          get 2 digit year 
          eq     dpack03
  
+         sx1    100         check to see if > 100 (yr 2000)
          ix1    x2-x1       compare
          ng     x1,dpack01  if < 100, year 1900
          bx2    x1          get 2 digit year 
          eq     dpack02
  
 dpack01  sx1    72          check to see if 2char date 
          ix1    x2-x1       compare
          pl     x1,dpack03  year in 1900 century 
 dpack02  sx0    2r20        set thousands/hundreds 
 dpack03  lx0    12          position for insert
          mx1    12          set up mask to clear century 
          lx1    24          position correctly 
          bx6    -x1*x6      00/00/..00 
          bx6    x6+x0       (x6) = 00/00/xx00
*d,exec9.950
*d,exec9.957
          lx0    30 
*d,exec9.964
          lx0    48 
*i,exec9.967
* /---   block      ident      00 000   82/10/09  20.05 
*d,exec9.973
*d,exec9.997,exec9.1003 
          pl     x1,datcvt1  if in y2k format, skip 
          lx1    6           (x1) = mm/dd/yy--
          mx0    12          mask out year to move
          lx0    24          position to *yy* 
          bx4    x0*x1       get *yy* 
          lx4    48          right justify *yy* 
          mx0    6*6         6 chars
          bx1    x0*x1       (x1) = mm/dd/....
          bx2    x4          copy *yy*
          ax2    6           right shift, drop ones digit 
          sx3    1r7         check for year 1970 or greater
          ix3    x2-x3       check to see if 1970 or greater
          pl     x3,*+2      if 1970 or greater, skip
+         sx0    2r20        set to year 20xx 
          eq     *+2
+         sx0    2r19        set to year 19xx 
+         lx0    12          position century for date
          bx1    x1+x0       (x1) = mm/dd/xx00
          bx1    x1+x4       (x1) = mm/dd/xxyy
  
 datcvt1  sb1    1           format 1 
          eq     b1,b3,dshif1 
          sb1    4           y2k form of format 1 
          eq     b1,b3,dshif1 
  
          sb1    2           format 2 
          eq     b1,b3,ddmmyy 
          sb1    5           y2k form of format 2 
          eq     b1,b3,ddmmyy 
  
* /---   block      ident      00 000   82/10/09  20.00 
*d,exec9.1007,exec9.1017
          bx2    x1*x4       mm/dd..... 
          lx2    42          ...mm/dd.. 
          mx4    -4*6        777777.... 
          bx3    -x4*x1      ......yyyy 
          lx3    48          yy......yy 
          sx4    1r/         ........./ 
          lx4    42          ../....... 
  
          sb1    6           y2k format 
          eq     b1,b3,ydm1  if y2k format
          mx0    12          mask top 2 chars 
          bx3    x0*x3       (yy........) 
          eq     ydm2 
  
 ydm1     lx2    48          .....mm/dd 
          lx3    48          yyyy...... 
          lx4    48          ..../..... 
  
 ydm2     bx7    x3+x4       yy/....... or yyyyy/.....
          bx7    x7+x2       yy/mm/dd.. or yyyy/mm/dd 
*d,exec9.1022,exec9.1046
 ddmmyy   mx0    -4*6        777777.... 
          bx7    -x0*x1      ......yyyy 
  
          sb1    5           y2k format 
          eq     b1,b3,*+2   if y2k format
  
+         mx0    -12
          bx7    -x0*x7      ........yy 
          lx7    12          ......yy.. 
  
+         mx0    3*6         777....... (2 chars of 77b)
          bx2    x1*x0       mm/....... 
          lx2    42          ...mm/...
          lx1    18          dd/yyyymm/ 
          bx3    x0*x1       dd/....... 
          bx7    x7+x3       dd/...yy.. or dd/...yyyy 
          bx7    x7+x2       dd/mm/yy.. or dd/mm/yyyy 
          eq     datcvt      exit 
  
  
 dshif1   bx7    x1          (mm/dd/yyyy) 
          sb1    4           y2k format 
          eq     b1,b3,datcvt   already in y2k, exit
  
          mx0    8*6         77777777.. 
          bx3    -x0*x1      mask out 2 digit year
          mx0    6*6         777777.... 
          bx7    x1*x0       mm/dd/.... 
          lx3    12          ......yy.. 
          bx7    x7+x3       mm/dd/yy.. 
          eq     datcvt      exit 
* /---   block      ident      00 000   82/10/03  18.35 
*d,exec9.1079,exec9.1081
          sb1    3           format 3 
          ne     b1,b3,dshf0 year is on left now
          lx1    3*6         move year to right side
          eq     dshf 
  
 dshf0    sb1    6           y2k form of format 3 
          ne     b1,b3,dshf  year is on left now
          lx7    5*6         move the year to right 
  
*i,exec9.1084 
  
  
*d,exec9.1117,exec9.1118
 datesl   con    10h00/00/0000
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,buy2k
*deck,backlib 
*i,backlib.159
* /---   block      tape       00 000   82/10/20  21.37 
* 
*d,bufix.1,backlib.165
          sx1    x1+96d      current year = yr+96 (base yr) 
          sx7    100d        see if past (19)99 
          ix7    x1-x7       subtract 100, + = year 20xx
          ng     x7,buildo1  if negative, not year 2000+
          sx1    x7          get 2 digit portion of yr 2000 
 buildo1  rj     cdd
*deck,backone 
*i,backone.341
* /---   block      backone    00 000   82/10/20  21.49 
* 
*d,backone.346,backone.347
          sx1    x1+96d      (current year = yr+96)
          sx7    100d        see if past (19)99 
          ix7    x1-x7       subtract 100, + = year 20xx
          ng     x7,buildo1  if negative, not year 2000+
          sx1    x7          get 2 digit portion of yr 2000 
 buildo1  rj     cdd
*deck,copymf
*i,copymf.247 
 setepr   space  4
**        setepr - set error processing bit in the fet
* 
*         entry  a1/x1=fet+1 and contents 
  
 setepr   data   0           entry/exit 
          sx6    b1          mask for epr 
          lx6    44 
          bx6    x6+x1
          sa6    a1 
          eq     setepr 
* /---   block      subrtines  00 000   82/10/20  21.26 
*d,bufix.1
** in packed date, the year is stored in 12 bits, full
** value (ie'; 1998).  'i assume it is already y2k
** compliant so will have a value of 2000 and beyond. 
** below, it subtracts 26d from year (1998), then masks 
** the lower 4 bits to come up with the offset.  'the 
** original offset was 13d (1980-1995), but with a
** modification, was changed to 26d to handle years 
** 1996-2011.  'a bit used in another word is used as a 
** flag to indicate the field is using the new format 
** (see mods made to deck '7backone'7 to see how flag set). 
** for example'; 1998-26=1972 (o3664), o3664 $mask$ o17 
** (4 bits) = 4.     cmh 10/20/98 
          sx5    26d         subtract 26 years (1996 base)
*d,copymf.297,copymf.308
*deck,copypf
*i,copypf.1317
* /---   block      copypfx    00 000   82/10/20  21.55 
* 
*d,copypf.1322,copypf.1323
          sx1    x1+96d      (current year = yr+96)
          sx7    100d        see if past (19)99 
          ix7    x1-x7       subtract 100, + = year 20xx
          ng     x7,buildo1  if negative, not year 2000+
          sx1    x7          get 2 digit portion of yr 2000 
 buildo1  rj     cdd
*/ -------------------------------------------------------------------
*/ -------------------------------------------------------------------
*ident,datinfx
*deck,filex 
*d,uznsubf.140
*d,filexx.428 
 dserr2x  sx6    2           2 = bad record number
*d,uznsub1.265,uznsub1.268
          ng     x6,dserr2x  --- error if bad record number 
          mx2    -18         check if too big 
          bx2    x2*x1
          nz     x2,dserr2x  --- error if bad record number 
*deck,exec1 
*d,exec1.2221 
*         uses a/0,4
*d,exec1.2225,rewefx2.1 
          sx0    x4          unit info only 
          sa4    ecsuloc     get address of -uloc- table
          ix0    x4+x0       index to this unit 
*deck,filex 
*d,filexx.565 
          sa1    ilesun      load lesson number 
          bx5    x1          move it to *x5*
*deck,ioput 
*i,ioput.1998 
          sa5    a5          restore *x5* incase lost 
*/ -------------------------------------------------------------------
